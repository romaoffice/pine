// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Fresh_P

//@version=4
study("Monthly/Weekly/Daily Open", overlay=true, max_lines_count=500)

use_tf = input('D', 'Timeframe for alerts', options=['D', 'W', 'M', 'Y'])
tf_index = use_tf == 'D' ? 0 : use_tf =='W' ? 1 : use_tf == 'M' ? 2 : 3
timeout = input(30, 'Timeout in seconds')
only_bar_close = input(false, 'Only trigger on close')

open_thld = input(5.0, 'Threshold in percent')
alerts = input('Both', 'Directions to trigger', options=['Both', 'Only Long', 'Only Short'])

//--------------------------------------------------------------------
//                             Constants
//--------------------------------------------------------------------

var HEAD_PADDING        = -2
var HEAD_TRANSP         = 60
var LABEL_SIZE          = size.small
var LABEL_STYLE         = label.style_none
var LINE_STYLE          = line.style_solid
var LINE_WIDTH          = 1
var OFFSET_PADDING      = 4
var TAIL_STYLE          = line.style_dotted

//--------------------------------------------------------------------
//                               Inputs
//--------------------------------------------------------------------

t_tails                 = "Extends last opens on historical bars."
t_heads                 = "Extends previous opens in the future."
t_discoverPrices        = "Discovers the opening prices from the intraday chart.\n\nYou may use this setting when there are discrepancies between the data from intraday and high time frames."
t_extendedHours         = "Discovers the opening prices from the extended trading hours if available."

var i_isDailyEnabled    = input     (true,          "Daily",                                inline="Daily",     group="Opens")
var i_dailyColor        = input     (color.green,   "",                                     inline="Daily",     group="Opens")
var i_dailyLookback     = input (1,             "", input.integer,                             inline="Daily",     group="Opens")
var i_isWeeklyEnabled   = input     (true,          "Weekly",                               inline="Weekly",    group="Opens")
var i_weeklyColor       = input     (color.orange,  "",                                     inline="Weekly",    group="Opens")
var i_weeklyLookback    = input (1,             "", input.integer,                                  inline="Weekly",    group="Opens")
var i_isMonthlyEnabled  = input     (true,          "Monthly",                              inline="Monthly",   group="Opens")
var i_monthlyColor      = input     (color.red,     "",                                     inline="Monthly",   group="Opens")
var i_monthlyLookback   = input (1,             "", input.integer,                                  inline="Monthly",   group="Opens")
var i_isYearlyEnabled   = input     (true,          "Yearly",                               inline="Yearly",    group="Opens")
var i_yearlyColor       = input     (color.blue,    "",                                     inline="Yearly",    group="Opens")
var i_yearlyLookback    = input (1,             "", input.integer,                                  inline="Yearly",    group="Opens")
var i_rightOffset       = input (20,            "Offset", input.integer,                                                group="Style")
var i_areTailsEnabled   = input     (false,         "Show Tails",                                       group="Style")
var i_areHeadsEnabled   = input     (false,         "Show Projections",                                group="Style")
var i_discoverPrices    = input     (false,         "Discover Prices",                       group="Settings")
var i_extendedHours     = input     (false,         "Extended Hours",                         group="Settings")

//--------------------------------------------------------------------
//                        Variables declarations
//--------------------------------------------------------------------

var a_lastOpens             = array.new_float(4)
var canShowDaily            = i_isDailyEnabled and timeframe.isintraday
var canShowWeekly           = i_isWeeklyEnabled and (timeframe.isintraday or timeframe.isdaily)
var canShowMonthly          = i_isMonthlyEnabled and not timeframe.ismonthly
var canShowYearly           = i_isYearlyEnabled and not (timeframe.ismonthly and timeframe.multiplier >= 12)
var hasExtendedHours        = i_extendedHours and syminfo.session == session.extended
var discoverPrices          = i_discoverPrices or hasExtendedHours

[dailyTime, dailyOpen]      = security(syminfo.tickerid, 'D',   [time, open], lookahead=barmerge.lookahead_on)
[weeklyTime, weeklyOpen]    = security(syminfo.tickerid, 'W',   [time, open], lookahead=barmerge.lookahead_on)
[monthlyTime, monthlyOpen]  = security(syminfo.tickerid, 'M',   [time, open], lookahead=barmerge.lookahead_on)
[yearlyTime, yearlyOpen]    = security(syminfo.tickerid, '12M', [time, open], lookahead=barmerge.lookahead_on)

hasDailyTimeChanged         = hasExtendedHours ? time_tradingday != time_tradingday[1] : dailyTime != dailyTime[1]
hasWeekklyTimeChanged       = hasExtendedHours ? weekofyear != weekofyear[1] : weeklyTime != weeklyTime[1]
hasMonthlyTimeChanged       = hasExtendedHours ? month != month[1] : monthlyTime != monthlyTime[1]
hasYearlyTimeChanged        = hasExtendedHours ? year != year[1] : yearlyTime != yearlyTime[1]

//--------------------------------------------------------------------
//                              Functions 
//--------------------------------------------------------------------

// If different opens share the same opening prices, their labels will overlap
// Instead, we pad the higher time frame ones for achieving a "separator sheet"
f_getPadding(_index) =>
    _padding = 0
    // Weekly, monthly, or yearly overlaps the daily open
    if _index > 0 and canShowDaily and array.get(a_lastOpens, 0) == array.get(a_lastOpens, _index)
        _padding += 1
    // Monthly or yearly overlaps the weekly open
    if _index > 1 and canShowWeekly and array.get(a_lastOpens, 1) == array.get(a_lastOpens, _index)
        _padding += 1
    // Yearly overlaps the monthly open
    if _index > 2 and canShowMonthly and array.get(a_lastOpens, 2) == array.get(a_lastOpens, _index)
        _padding += 1
    _padding

f_getRightBarIndex(_padding) => bar_index + i_rightOffset + _padding * OFFSET_PADDING

// On the weekly time frame, the monthly/yearly open is drawn from the first candle of the month/year
// The first weekly candle is not necessarily containing the first day of the month
// In such case, we visually anchor the open of the previous weekly candle
f_isContainedOnPrevWeekly(_time) => timeframe.isweekly and dayofmonth(time) > dayofmonth(_time)

// Create and update an open level. An open is composed of a label, a "body" line, and optional "tail" and "head" lines extensions
f_draw(_newOpen, _y, _lookback, _padding, _color,  _text,  _prevTime) =>
    var line _body  = na 
    var _label      = label.new(na, na, _text, style=LABEL_STYLE, textcolor=_color, size=LABEL_SIZE)
    var _tail       = line.new(na, na, na, na, color=_color, style=TAIL_STYLE, width=LINE_WIDTH, extend=extend.left)
    var _bodies     = array.new_line()
    var _heads      = array.new_line()
    _start          = _prevTime ? bar_index - 1 : bar_index
    _end            = f_getRightBarIndex(_padding)

    if _newOpen
        // Label
        label.set_xy(_label, _end, _y)
        label.set_tooltip(_label, tostring(_y, format.mintick))

        // Body
        line.set_x2(_body, bar_index)
        _body := line.new(_start, _y, _end, _y, color=_color, style=LINE_STYLE, width=LINE_WIDTH)
        array.push(_bodies, _body)

        // Head
        if i_areHeadsEnabled
            array.push(_heads, line.new(bar_index, _y, bar_index, _y, color=color.new(_color, HEAD_TRANSP), style=LINE_STYLE, width=LINE_WIDTH))

        // Tail
        if i_areTailsEnabled
            line.set_xy1(_tail, _start - 1, _y)
            line.set_xy2(_tail, _start, _y)

        if array.size(_bodies) > _lookback
            line.delete(array.shift(_bodies))
        if array.size(_heads) > _lookback
            line.delete(array.shift(_heads))

    if barstate.islast
        line.set_x2(_body, _end)
        label.set_x(_label, _end)

        if i_areHeadsEnabled and array.size(_heads) > 1
            // Not updating the last open's projection
            for i = 0 to array.size(_heads) - 2
                // Avoid projecting on last opens bodies
                if not array.includes(a_lastOpens, line.get_y1(array.get(_heads, i)))
                    line.set_x2(array.get(_heads, i), f_getRightBarIndex(HEAD_PADDING))

//--------------------------------------------------------------------
//                                Logic
//--------------------------------------------------------------------

if canShowDaily and hasDailyTimeChanged 
    array.set(a_lastOpens, 0, discoverPrices ? open : dailyOpen)

if canShowWeekly and hasWeekklyTimeChanged
    array.set(a_lastOpens, 1, discoverPrices ? open : weeklyOpen)

if canShowMonthly and hasMonthlyTimeChanged
    array.set(a_lastOpens, 2, discoverPrices ? open : monthlyOpen)

if canShowYearly and hasYearlyTimeChanged
    array.set(a_lastOpens, 3, discoverPrices ? open : yearlyOpen)

//--------------------------------------------------------------------
//                          Plotting & styling
//--------------------------------------------------------------------

if canShowYearly
    f_draw(hasYearlyTimeChanged, array.get(a_lastOpens, 3), i_yearlyLookback, f_getPadding(3), i_yearlyColor, "Y   ", f_isContainedOnPrevWeekly(yearlyTime))

if canShowMonthly
    f_draw(hasMonthlyTimeChanged, array.get(a_lastOpens, 2), i_monthlyLookback, f_getPadding(2), i_monthlyColor, "M   ", f_isContainedOnPrevWeekly(monthlyTime))

if canShowWeekly
    f_draw(hasWeekklyTimeChanged, array.get(a_lastOpens, 1), i_weeklyLookback, f_getPadding(1), i_weeklyColor, "W   ",false)

if canShowDaily
    f_draw(hasDailyTimeChanged, array.get(a_lastOpens, 0), i_dailyLookback, f_getPadding(0), i_dailyColor, "D   ",false)

// Plot invisible opens for displaying last values in `status line`, `scale`, `data window` as well for providing defaults alert conditions

plot(array.get(a_lastOpens, 0), "D",    color.new(i_dailyColor, 100),   editable=false)
plot(array.get(a_lastOpens, 1), "W",    color.new(i_weeklyColor, 100),  editable=false)
plot(array.get(a_lastOpens, 2), "M",    color.new(i_monthlyColor, 100), editable=false)
plot(array.get(a_lastOpens, 3), "Y",    color.new(i_yearlyColor, 100),  editable=false)

crr_open = array.get(a_lastOpens, tf_index)


src = input(defval = close, title = "Source")
len1 = input(defval = 20, title = "Short Term Length", minval = 5)
len2 = input(defval = 50, title = "Long Term Length", minval = 5)

// get short/long-term regression slope
slope_price = linreg(src, len1, 0) - linreg(src, len1, 1)
slope_price_lt = linreg(src, len2, 0) - linreg(src, len2, 1)

// get the size of top/bottom/body of the candle
tw = high - max(open, close) 
bw = min(open, close) - low 
body = abs(close - open) 

//Calculate Buy/Sell Volume
_rate(cond) =>
    ret = 0.5 * (tw + bw + (cond ? 2 * body : 0)) / (tw + bw + body) 
    ret := na(ret) ? 0.5 : ret
    ret

// Calculate Regression Slope for Buy/Sell Volumes
_get_trend(len)=>   
    deltaup =  volume * _rate(open <= close) 
    deltadown = volume * _rate(open > close)
    
    slope_volume_up = linreg(deltaup, len, 0) - linreg(deltaup, len, 1)
    slope_volume_down = linreg(deltadown, len, 0) - linreg(deltadown, len, 1)
    [slope_volume_up, slope_volume_down]

// get buy/sell volume regression slopes for short term period
[slope_volume_up, slope_volume_down] = _get_trend(len1)

message_entry_long = ''
message_entry_short = ''

message_exit_long = ''
message_exit_short = ''


varip int last_alert = 0
varip float last_alert_time = 0

plot(crr_open, color=color.purple)

exceeding_threshold_long = close > crr_open * (1+open_thld/100)
exceeding_threshold_short = close < crr_open * (1-open_thld/100)

within_threshold = not (exceeding_threshold_long or exceeding_threshold_short)

switched_red_to_green = slope_price[1] < 0 and slope_price > 0
switched_green_to_red = slope_price[1] > 0 and slope_price < 0

hist_green = slope_price > 0
hist_red = slope_price < 0

if (timenow > last_alert_time + timeout*1000) and (barstate.isconfirmed or not only_bar_close)
    if exceeding_threshold_long and last_alert != 1
        if alerts != 'Only Long'
            alert(message_exit_short, freq=alert.freq_all)
        if alerts != 'Only Short'
            alert(message_entry_long, freq=alert.freq_all)
        if barstate.isrealtime
            last_alert := 1
            last_alert_time := timenow
        
    if exceeding_threshold_short and last_alert != -1
        if alerts != 'Only Short'
            alert(message_exit_long, freq=alert.freq_all)
        if alerts != 'Only Long'
            alert(message_entry_short, freq=alert.freq_all)
        if barstate.isrealtime
            last_alert := -1
            last_alert_time := timenow
    
        
    if within_threshold
        if hist_green and last_alert != 1 
            if alerts != 'Only Long'
                alert(message_exit_short, freq=alert.freq_all)
            if alerts != 'Only Short'
                alert(message_entry_long, freq=alert.freq_all)
            if barstate.isrealtime
                last_alert := 1
                last_alert_time := timenow
        if hist_red and last_alert != -1 
            if alerts != 'Only Short'
                alert(message_exit_long, freq=alert.freq_all)
            if alerts != 'Only Long'
                alert(message_entry_short, freq=alert.freq_all)
            if barstate.isrealtime
                last_alert := -1
                last_alert_time := timenow

