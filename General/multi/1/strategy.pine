// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© tymchenkoser

//@version=5
strategy("Model#1", overlay=true, margin_long=100, margin_short=100,default_qty_type=strategy.percent_of_equity,default_qty_value=2)

//BBWP
///////////////////////////////////////////////////////////////////////////////
// inputs
var string s_HMMML = 'High - Mid Hi - Mid - Mid Low - Low'
var string s_HML   = 'High - Mid - Low'
var string s_HL    = 'High - Low'
i_priceSrc      = input.source  ( close,        'Price Source',                                                                                               group = 'BBWP Properties')
i_basisType     = input.string  ( 'SMA',        'Basis Type',                       options=[ 'SMA', 'EMA', 'WMA', 'RMA', 'HMA', 'VWMA' ],                    group = 'BBWP Properties')
i_bbwpLen       = input.int     ( 13,           'Length',                           minval=1,                                                                 group = 'BBWP Properties')
i_bbwpLkbk      = input.int     ( 252,          'Lookback',                         minval=1,                                                                 group = 'BBWP Properties')

i_c_typ_line    = input.string  ( 'Spectrum',   'Color Type',                       options=[ 'Spectrum', 'Solid' ],                          inline = '1',   group = 'Line Plot Settings')
i_c_so_line     = input.color   ( #FFFF00,    'Solid Color',                                                                                inline = '1',   group = 'Line Plot Settings')
i_c_typ_sp_line = input.string  ( s_HMMML,      'Spectrum',                         options=[ s_HL, s_HML, s_HMMML ],                         inline = '2',   group = 'Line Plot Settings')
i_c_sp_hi_line  = input.color   ( #FF0000,    'High',                                                                                       inline = '3',   group = 'Line Plot Settings')
i_c_sp_mhi_line = input.color   ( #ffff00,    'Mid Hi',                                                                                     inline = '3',   group = 'Line Plot Settings')
i_c_sp_mid_line = input.color   ( #00FF00,    'Mid',                                                                                        inline = '3',   group = 'Line Plot Settings')
i_c_sp_mlo_line = input.color   ( #00ffff,    'Mid Lo',                                                                                     inline = '3',   group = 'Line Plot Settings')
i_c_sp_lo_line  = input.color   ( #0000FF,    'Low',                                                                                        inline = '3',   group = 'Line Plot Settings')
i_p_width_line  = input.int     ( 2,            'Line Width',                       minval=1, maxval=4,                                       inline = '4',   group = 'Line Plot Settings')

i_ma1On         = input.bool    ( true,         '',                                                                                           inline = '1',   group = 'Moving Average Settings')
i_ma1Type       = input.string  ( 'SMA',        'MA 1 Type',                        options=[ 'SMA', 'EMA', 'WMA', 'RMA', 'HMA' ],            inline = '1',   group = 'Moving Average Settings')
i_c_ma1         = input.color   ( #FFFFFF,    '',                                                                                           inline = '1',   group = 'Moving Average Settings')
i_ma1Len        = input.int     ( 5,            'Length',                           minval=1,                                                 inline = '1',   group = 'Moving Average Settings')
i_ma2On         = input.bool    ( false,        '',                                                                                           inline = '2',   group = 'Moving Average Settings')
i_ma2Type       = input.string  ( 'SMA',        'MA 2 Type',                        options=[ 'SMA', 'EMA', 'WMA', 'RMA', 'HMA' ],            inline = '2',   group = 'Moving Average Settings')
i_c_ma2         = input.color   ( #00FFFF,    '',                                                                                           inline = '2',   group = 'Moving Average Settings')
i_ma2Len        = input.int     ( 8,            'Length',                           minval=1,                                                 inline = '2',   group = 'Moving Average Settings')

i_alrtsOn       = input.bool    ( true,         'Alerts On',                                                                                                  group = 'Visual Alerts')
i_upperLevel    = input.int     ( 98,           'Extreme High',                     minval=1, inline='1',                                                     group = 'Visual Alerts')
i_lowerLevel    = input.int     ( 2,            'Extreme Low',                      minval=1, inline='1',                                                     group = 'Visual Alerts')

///////////////////////////////////////////////////////////////////////////////
// function declarations

f_maType ( _price, _len, _type ) =>
    switch _type
        "SMA" => ta.sma ( _price, _len )
        "EMA" => ta.ema ( _price, _len )
        "WMA" => ta.wma ( _price, _len )
        "RMA" => ta.rma ( _price, _len )
        "HMA" => ta.hma ( _price, _len )
        => ta.vwma ( _price, _len )

     // Returns moving average determined by _type       

f_bbwp ( _price, _bbwLen, _bbwpLen, _type ) =>
    float _basis = f_maType ( _price, _bbwLen, _type )
    float _dev = ta.stdev ( _price, _bbwLen )
    _bbw = ( _basis + _dev - ( _basis - _dev )) / _basis
    _bbwSum = 0.0
    _len = bar_index < _bbwpLen ? bar_index : _bbwpLen
    for _i = 1 to _len by 1
        _bbwSum += ( _bbw[_i] > _bbw ? 0 : 1 )
        _bbwSum
    _return = bar_index >= _bbwLen ? ( _bbwSum / _len) * 100 : na
    _return

     // Returns Bollinger Band Width Percentile

f_5Col ( _val, _lowV, _lmV, _midV, _hmV, _hiV, _lowC, _lmC, _midC, _mhC, _hiC ) =>
    _val <= _lmV ? color.from_gradient ( _val, _lowV, _lmV, _lowC, _lmC ) : _val <= _midV ? color.from_gradient ( _val, _lmV, _midV, _lmC, _midC ) : _val <= _hmV ? color.from_gradient ( _val, _midV, _hmV, _midC, _mhC ) : color.from_gradient ( _val, _hmV, _hiV, _mhC, _hiC )

     // Returns a quatruple spectrum color determined by _val from high to mid high to mid to mid low to low

f_3Col ( _val, _lowV, _midV, _hiV, _lowC, _midC, _hiC ) =>
    _val <= _midV ? color.from_gradient ( _val, _lowV, _midV, _lowC, _midC) : color.from_gradient ( _val, _midV, _hiV, _midC, _hiC)

     // Returns a double spectrum color determined by _val from high to mid to low

f_clrSlct ( _val, _type, _solid, _grad, _lowV, _lmV, _midV, _hmV, _hiV, _lowC, _lmC, _midC, _mhC, _hiC ) => 
    _type == 'Solid' ? _solid : _grad == s_HL ? color.from_gradient ( _val, _lowV, _hiV, _lowC, _hiC) : _grad == s_HML ? f_3Col ( _val, _lowV, _midV, _hiV, _lowC, _midC, _hiC ) : f_5Col ( _val, _lowV, _lmV, _midV, _hmV, _hiV, _lowC, _lmC, _midC, _mhC, _hiC )

     // Returns a color determined by _val from user settings of solid, or spectrum from high to low, or double spectrum from high to mid to low, or quatruple spectrum from high to mid high to mid to mid low to low

/////////////////////////////////////////////////////////////////////////////// 
// calculations

bbwp        = f_bbwp ( i_priceSrc, i_bbwpLen, i_bbwpLkbk, i_basisType )
c_bbwp      = f_clrSlct ( bbwp, i_c_typ_line, i_c_so_line, i_c_typ_sp_line, 0, 25, 50, 75, 100, i_c_sp_lo_line, i_c_sp_mlo_line, i_c_sp_mid_line, i_c_sp_mhi_line, i_c_sp_hi_line )
bbwpMA1     = i_ma1On ? f_maType ( bbwp, i_ma1Len, i_ma1Type ) : na
bbwpMA2     = i_ma2On ? f_maType ( bbwp, i_ma2Len, i_ma2Type ) : na
hiAlrtBar   = i_alrtsOn and bbwp >= i_upperLevel ? bbwp : na
loAlrtBar   = i_alrtsOn and bbwp <= i_lowerLevel ? bbwp : na

/////////////////////////////////////////////////////////////////////////////// 
// plots

//p_scaleHi   = hline ( 100,  'Scale High',#ff0000, hline.style_solid )
//p_midLine   = hline ( 50,   'Mid-Line',  #a6a6a6, hline.style_dashed )
//p_scaleLo   = hline ( 0,    'Scale Low', #0000ff, hline.style_solid )

//p_bbwp      = plot ( bbwp,      'BBWP',         c_bbwp, i_p_width_line, plot.style_line, editable=false )
//p_hiAlrt    = plot ( hiAlrtBar, 'Extreme Hi',   c_bbwp, 1, plot.style_columns, histbase=0, editable=false )
//p_loAlrt    = plot ( loAlrtBar, 'Extreme Lo',   c_bbwp, 1, plot.style_columns, histbase=100, editable=false )
//p_ma1       = plot ( bbwpMA1,   'MA 1',         i_c_ma1, 1, plot.style_line, 0 )
//p_ma2       = plot ( bbwpMA2,   'MA 2',         i_c_ma2, 1, plot.style_line, 0 )

/////////////////////////////
// end


//////////////////// ris divergency

// {FUNCTION
ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "Bollinger Bands" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)
//} 

//{USER MENU
rsiLengthInput = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSourceInput = input.source(close, "Source", group="RSI Settings")
maTypeInput = input.string("SMA", title="MA Type", options=["SMA", "Bollinger Bands", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="MA Settings")
maLengthInput = input.int(14, title="MA Length", group="MA Settings")
bbMultInput = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev", group="MA Settings")
//}

up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
rsiMA = ma(rsi, maLengthInput, maTypeInput)
isBB = maTypeInput == "Bollinger Bands"

// {DIVERGENCE INPUT
lbR = 5,lbL = 5, rangeUpper = 60, rangeLower = 5
plotBull = input(title='Plot Bullish', defval=true,group="Toggle Divergence Plotting"), plotBear = input(title='Plot Bearish', defval=true)
plotHiddenBull = input(title='Plot Hidden Bullish', defval=false), plotHiddenBear = input(title='Plot Hidden Bearish', defval=false)
// } 

osc = rsi
plFound = na(ta.pivotlow(osc, lbL, lbR)) ? false : true,phFound = na(ta.pivothigh(osc, lbL, lbR)) ? false : true

// {RSI TREND IDENTIFICATION 
_inRange(cond) =>
    bars = ta.barssince(cond == true)
    rangeLower <= bars and bars <= rangeUpper

oscHL = osc[lbR] > ta.valuewhen(plFound, osc[lbR], 1) and _inRange(plFound[1]), oscLL = osc[lbR] < ta.valuewhen(plFound, osc[lbR], 1) and _inRange(plFound[1])
oscHH = osc[lbR] > ta.valuewhen(phFound, osc[lbR], 1) and _inRange(phFound[1]),oscLH = osc[lbR] < ta.valuewhen(phFound, osc[lbR], 1) and _inRange(phFound[1])

// }

// {PRICE TREND IDENTIFICATION
priceLL = low[lbR] < ta.valuewhen(plFound, low[lbR], 1), priceHL = low[lbR] > ta.valuewhen(plFound, low[lbR], 1)
priceHH = high[lbR] > ta.valuewhen(phFound, high[lbR], 1),priceLH = high[lbR] < ta.valuewhen(phFound, high[lbR], 1)
//}

//{DIVERGENCE IDENTIFICATION
bullCond = priceLL and oscHL and plFound, hiddenBullCond = priceHL and oscLL and plFound
bearCond = priceHH and oscLH and phFound, hiddenBearCond = priceLH and oscHH and phFound
// } 

// { COLOR ASSIGNMENT 
//bearColor = color.red, bullColor = color.green, hiddenBullColor = color.new(color.green, 0), hiddenBearColor = color.new(color.red, 0)
//textColor = color.white,noneColor = color.new(color.white, 100)
//}

// { PLOTS  
//plot(osc, title='RSI', linewidth=1, color=color.rgb(128,128,128))
//plot(rsiMA, "RSI-based MA", color=color.yellow)
//rsiUpperBand = hline(70, "RSI Upper Band", color=#787B86)
//hline(50, "RSI Middle Band", color=color.new(#787B86, 50))
//rsiLowerBand = hline(30, "RSI Lower Band", color=#787B86)
//fill(rsiUpperBand, rsiLowerBand, color=color.rgb(126, 87, 194, 90), title="RSI Background Fill")
//bbUpperBand = plot(isBB ? rsiMA + ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Upper Bollinger Band", color=color.green)
//bbLowerBand = plot(isBB ? rsiMA - ta.stdev(rsi, maLengthInput) * bbMultInput : na, title = "Lower Bollinger Band", color=color.green)
//fill(bbUpperBand, bbLowerBand, color= isBB ? color.new(color.green, 90) : na, title="Bollinger Bands Background Fill")
//plot(plFound ? osc[lbR] : na, offset=-lbR, title='Regular Bullish', linewidth=3, color=bullCond ? bullColor : noneColor, transp=0)
//plot(plFound ? osc[lbR] : na, offset=-lbR, title='Hidden Bullish', linewidth=3, color=hiddenBullCond ? hiddenBullColor : noneColor, transp=0)
//plot(phFound ? osc[lbR] : na, offset=-lbR, title='Regular Bearish', linewidth=3, color=bearCond ? bearColor : noneColor, transp=0)
//plot(phFound ? osc[lbR] : na, offset=-lbR, title='Hidden Bearish', linewidth=3, color=hiddenBearCond ? hiddenBearColor : noneColor, transp=0)
// }
// {ALERTS 
//alertcondition(bullCond,title='Bullish Divergence',message='Bullish Divergence Detected on {{ticker}}')
//alertcondition(hiddenBullCond,title='Hidden Bull Divergence',message='Hidden Bull Divergence Detected on {{ticker}}')
//alertcondition(bearCond,title='Bearish Divergence',message='Bearish Divergence Detected on {{ticker}}')
//alertcondition(hiddenBearCond,title='Hidden Bear Divergence',message='Hidden Bearish Divergence Detected on {{ticker}}')
// } 
//[/PINE]}

fastEmaPeriod=input.int(21,'Fast Period(EMA)',group='Trading')
slowEmaPeriod=input.int(55,'Slow Period(EMA)',group='Trading')
BBWPLevel = input.float(25,'BBWP level',group='Trading')
useDailyFilter = input.bool(false,'Use daily filter',group='Trading')
useConfirmHiddenDivergency = input.bool(false,'Use Hidden divergency Filter',group='Trading')
emaFast = ta.ema(close,fastEmaPeriod)
emaSlow = ta.ema(close,slowEmaPeriod)

dailyEmaFast = request.security(syminfo.tickerid, "1D",emaFast)
dailyEmaSlow = request.security(syminfo.tickerid, "1D",emaSlow)
dailyLongFilter = dailyEmaFast>dailyEmaSlow
dailyShortFilter = dailyEmaFast<dailyEmaSlow

long_entry_condition = emaFast>emaSlow and bbwp<BBWPLevel and (useDailyFilter==false or dailyLongFilter) and (useConfirmHiddenDivergency==false or hiddenBullCond)
short_entry_condition = emaFast<emaSlow and bbwp<BBWPLevel and (useDailyFilter==false or dailyShortFilter) and (useConfirmHiddenDivergency==false or hiddenBearCond)

//divergency and lh,hl
long_exit_condition = high<high[1] or bearCond
short_exit_condition = low>low[1] or bullCond

plot(bearCond?1:0,title='bearCond')
plot(bullCond?1:0,title='bullCond')

plot(emaFast,color=color.red)
plot(emaSlow,color=color.blue)

varip float sl1=0.0
varip float sl2=0.0
plot(sl1,title='sl1',color=color.red)
plot(sl2,title='sl2',color=color.blue)
if (long_entry_condition and barstate.isconfirmed)
    strategy.entry("long", strategy.long,limit=emaSlow)

if (short_entry_condition and barstate.isconfirmed)
    strategy.entry("short", strategy.short,limit=emaSlow)

if(strategy.position_size>0 and strategy.position_size[1]<=0)
    sl1:=math.min(low[1],low)
    sl2:=math.min(low[1],low)
if(strategy.position_size<0 and strategy.position_size[1]>=0)
    sl1:=math.max(high[1],high)
    sl2:=math.max(high[1],high)

if(strategy.position_size!=0 and barstate.isconfirmed)
    if(strategy.position_size>0)
        sl2:=math.max(low[1],sl2)
        strategy.exit("exit","long",stop=math.max(sl1,sl2))
    else
        sl2:=math.min(high[1],sl2)
        strategy.exit("exit","short",stop=math.min(sl1,sl2))

if(strategy.position_size!=0 and barstate.isconfirmed)
    if(strategy.position_size[1]>0 and strategy.position_size>0 and long_exit_condition)
        strategy.close("long")
    if(strategy.position_size[1]<0 and strategy.position_size<0 and short_exit_condition)
        strategy.close("short")